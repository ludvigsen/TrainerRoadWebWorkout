{"version":3,"sources":["stores/MainStore.js","utils/TrainerRoadAPI.js","stores/SensorDataStore.js","styles/Global.js","components/Chart.jsx","components/Grid.jsx","components/Tile.jsx","utils/DeviceUtils.js","containers/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","workout","workoutData","running","startTime","undefined","pauseTime","decorate","observable","createContext","getWorkout","id","a","async","fetch","method","headers","credentials","then","response","json","Workout","getWorkouts","Workouts","SensorData","powerData","heartRateMonitorData","cadenceData","addHr","value","push","time","Date","now","addPower","addCadence","this","length","power","computed","hr","cadence","styles","background","foreground","disabled","graphColor","Chart","style","ticks","hrData","currentTime","useState","hoveredValue","setHoveredValue","margin","color","left","right","data","onValueMouseOver","onValueMouseOut","fill","tickValues","tickFormat","Math","ceil","display","flexWrap","Grid","children","cursor","fontSize","isDisabled","isNaN","Tile","title","width","onClick","Global","HR","CADENCE","CHANGE_EVENT","characteristicMap","heart_rate","cycling_power","cycling_speed_and_cadence","ble_sint16","ble_uint16","cycling_power_measurement","dataFunction","dataview","offset","mask","getUint16","fields","fieldArrangement","fdesc","flag","fieldDescriptions","field","accessor","fieldSize","endianness","fieldName","getUint8","connectDevice","serviceName","callback","localStorage","getItem","device","server","start","interval","setInterval","factor","round","random","stop","clearInterval","listener","event","target","console","log","navigator","bluetooth","requestDevice","filters","services","optionalServices","gatt","connect","getPrimaryService","service","getCharacteristic","characteristic","addEventListener","startNotifications","stopNotifications","removeEventListener","error","connectPowerMeter","connectHeartRateMonitor","connectCadenceMeter","backgroundColor","textAlign","position","top","bottom","flexItem","gridColumn","height","observer","main","useContext","MainStore","setTime","animate","requestRef","current","requestAnimationFrame","useRef","useEffect","cancelAnimationFrame","sensorData","SensorDataStore","x","floor","workoutTime","workoutTimeString","moment","utc","format","intervalData","filter","IsFake","sort","y","End","find","intervalTime","seconds","powerMeter","hrMonitor","memberFtpPercent","cadenceMeter","map","LoadWorkout","workoutId","useParams","workouts","Id","d","fetchData","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25f23b93.chunk.js","sourcesContent":["import { createContext } from 'react';\nimport { decorate, observable, computed } from 'mobx';\n\nexport class Main {\n  workout = {};\n  workoutData = [];\n\n  running = false;\n  startTime = undefined;\n  pauseTime = undefined;\n}\n\ndecorate(Main, {\n  workout: observable,\n  workoutData: observable,\n\n  running: observable,\n  startTime: observable,\n  pauseTime: observable,\n});\n\nexport default createContext(new Main());\n","export async function getWorkout(id) {\n  const response = await fetch(`https://www.trainerroad.com/api/workoutdetails/${id}`, {\n    method: 'get',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',\n\n    /*body: {\n        \"first_name\": this.firstName.value\n      }*/\n  }).then(response => response.json());\n  return response.Workout;\n}\n\nexport async function getWorkouts() {\n  const response = await fetch('https://www.trainerroad.com/api/workouts', {\n    method: 'post',\n    headers: { 'Content-Type': 'application/json' },\n    credentials: 'include',\n  }).then(response => response.json());\n  return response.Workouts;\n}\n","import { createContext } from 'react';\nimport { decorate, observable, computed } from 'mobx';\n\nclass SensorData {\n  powerData = [];\n  heartRateMonitorData = [];\n  cadenceData = [];\n\n  get power() {\n    if (this.powerData.length > 0) {\n      return this.powerData[this.powerData.length - 1].value;\n    }\n    return -1;\n  }\n\n  get hr() {\n    if (this.heartRateMonitorData.length > 0) {\n      return this.heartRateMonitorData[this.heartRateMonitorData.length - 1].value;\n    }\n    return -1;\n  }\n\n  get cadence() {\n    if (this.cadenceData.length > 0) {\n      return this.cadenceData[this.cadenceData.length - 1].value;\n    }\n    return -1;\n  }\n\n  addHr = value => {\n    this.heartRateMonitorData.push({ time: Date.now(), value });\n  };\n\n  addPower = value => {\n    this.powerData.push({ time: Date.now(), value });\n  };\n\n  addCadence = value => {\n    this.cadenceData.push({ time: Date.now(), value });\n  };\n}\n\ndecorate(SensorData, {\n  powerData: observable,\n  heartRateMonitorData: observable,\n  cadenceData: observable,\n\n  power: computed,\n  hr: computed,\n  cadence: computed,\n});\n\nexport default createContext(new SensorData());\n","const styles = {\n  background: '#242424',\n  foreground: '#fff',\n  disabled: '#808080',\n  graphColor: '#49a1e5',\n};\n\nexport default styles;\n","import React, {useState} from 'react';\nimport { Hint, FlexibleXYPlot, XAxis, YAxis, HorizontalGridLines, LineSeries, AreaSeries, Crosshair } from 'react-vis';\n\nimport Global from '../styles/Global'\n\nconst Chart = ({style={},ticks = [], workoutData = [], hrData, powerData, currentTime}) => {\n  const [hoveredValue, setHoveredValue] = useState();\n  return (\n    <div style={style}>\n      <FlexibleXYPlot margin={{ color: 'white', left: 60, right: 40 }}>\n        <HorizontalGridLines />\n        <AreaSeries data={workoutData} onValueMouseOver={setHoveredValue}\n    onValueMouseOut={() => setHoveredValue(null)}>\n    <Hint value={hoveredValue}>\n      <div>\n        <span>This is a test</span>\n      </div>\n    </Hint>\n        </AreaSeries>\n      {hrData && <LineSeries color=\"red\" data={hrData} />}\n      {powerData && <LineSeries color=\"yellow\" data={powerData} />}\n      <XAxis style={{fill: \"white\"}} tickValues={ticks} tickFormat={value => Math.ceil(value / 1000 / 60)} />\n      <YAxis style={{fill: \"white\"}} />\n      </FlexibleXYPlot>\n    </div>\n);\n}\n\nexport default Chart;\n\n","import React from 'react';\n\nconst style = {\n  display: 'flex',\n  flexWrap: 'wrap'\n};\n\nconst Grid = ({children}) => (<div style={{...style}}>\n  {children}\n</div>) \n\nexport default Grid;\n","import React from 'react';\n\nimport Global from '../styles/Global'\n\nconst style = {\n  cursor: 'pointer',\n  fontSize: '1vw'\n}\n\nfunction isDisabled(value) {\n  return (value && !isNaN(value) && value >= 0) || value && value.length > 0;\n}\n\nconst Tile = ({title, value, width, onClick = () => {} }) => (\n  <div style={{...style, width}} onClick={onClick}>\n    <h3>{title}</h3>\n    <h2 style={{fontSize: '5vw', color: isDisabled(value)? Global.foreground : Global.disabled}}>{isDisabled(value) ? value : '---'}</h2>\n  </div>\n)\n\nexport default Tile;\n","const HR = 'heart_rate';\nconst POWER = 'cycling_power';\nconst CADENCE = 'cycling_speed_and_cadence';\nconst CHANGE_EVENT = 'characteristicvaluechanged';\n\n//const FTP = 320;\n\nconst characteristicMap = {\n  heart_rate: 'heart_rate_measurement',\n  cycling_power: 'cycling_power_measurement',\n  cycling_speed_and_cadence: 0x2a5b,\n};\n\nconst writeValueCharacteristicUUID = 'a026e0050a7d4ab397faf1500f9feb8b';\n// e0 = 224;\nconst writeSetErgResistanceTo224 = '42e000';\n\nconst ble_sint16 = ['getInt16', 2, true];\nconst ble_uint8 = ['getUint8', 1];\nlet ble_uint16 = ['getUint16', 2, true];\nlet ble_uint32 = ['getUint32', 4, true];\n// TODO: paired 12bit uint handling\nlet ble_uint24 = ['getUint8', 3];\n\nconst cycling_power_measurement = [\n  [0, [[ble_sint16, 'instantaneous_power']]],\n  [1, [[ble_uint8, 'pedal_power_balance']]],\n  [\n    2,\n    [\n      /* Pedal Power Balance Reference */\n    ],\n  ],\n  [4, [[ble_uint16, 'accumulated_torque']]],\n  [\n    8,\n    [\n      /* Accumulated Torque Source */\n    ],\n  ],\n  [\n    16,\n    [\n      [ble_uint32, 'cumulative_wheel_revolutions'],\n      [ble_uint16, 'last_wheel_event_time'],\n    ],\n  ],\n  [\n    32,\n    [\n      [ble_uint16, 'cumulative_crank_revolutions'],\n      [ble_uint16, 'last_crank_event_time'],\n    ],\n  ],\n  [\n    64,\n    [\n      [ble_sint16, 'maximum_force_magnitude'],\n      [ble_sint16, 'minimum_force_magnitude'],\n    ],\n  ],\n  [\n    128,\n    [\n      [ble_sint16, 'maximum_torque_magnitude'],\n      [ble_sint16, 'minimum_torque_magnitude'],\n    ],\n  ],\n  [256, [[ble_uint24, 'maximum_minimum_angle']]],\n  [512, [[ble_uint16, 'top_dead_spot_angle']]],\n  [1024, [[ble_uint16, 'bottom_dead_spot_angle']]],\n  [2048, [[ble_uint16, 'accumulated_energy']]],\n  [\n    4096,\n    [\n      /* Offset Compensation Indicator */\n    ],\n  ],\n];\n\nconst getPowerData = dataview => {\n  let offset = 2;\n  const mask = dataview.getUint16(0, true);\n  const fields = cycling_power_measurement;\n\n  let fieldArrangement = [];\n\n  // Contains required fields\n  if (fields[0][0] === 0) {\n    for (let fdesc of fields[0][1]) {\n      fieldArrangement.push(fdesc);\n    }\n  }\n\n  for (let [flag, fieldDescriptions] of fields) {\n    if (mask & flag) {\n      for (let fdesc of fieldDescriptions) {\n        fieldArrangement.push(fdesc);\n      }\n    }\n  }\n\n  let data = {};\n  for (let field of fieldArrangement) {\n    var [[accessor, fieldSize, endianness], fieldName] = field;\n    let value;\n    if (endianness) {\n      value = dataview[accessor](offset, endianness);\n    } else {\n      value = dataview[accessor](offset);\n    }\n\n    data[fieldName] = value;\n    offset += fieldSize;\n  }\n\n  return data['instantaneous_power'];\n};\n\nconst getHeartRateData = value => value.getUint8(1);\n\nconst dataFunction = {\n  cycling_power: getPowerData,\n  heart_rate: getHeartRateData,\n};\n\nconst connectDevice = serviceName => async (callback = () => {}) => {\n  if (localStorage.getItem('simulation') === 'true') {\n    let interval;\n    return {\n      device: {},\n      server: {},\n      start: () => {\n        interval = setInterval(() => {\n          const factor = serviceName === HR ? 300 : serviceName === CADENCE ? 120 : 180;\n          callback(Math.round(Math.random() * factor));\n        }, 1000);\n      },\n      stop: () => {\n        clearInterval(interval);\n      },\n    };\n  }\n  try {\n    const device = await navigator.bluetooth.requestDevice({\n      filters: [{ services: [serviceName] }],\n      optionalServices: [serviceName],\n    });\n\n    const server = await device.gatt.connect();\n\n    const service = await server.getPrimaryService(serviceName);\n    const characteristic = await service.getCharacteristic(characteristicMap[serviceName]);\n    console.log(`connected to ${serviceName}`);\n\n    function listener(event) {\n      const data = dataFunction[serviceName](event.target.value);\n      console.log('DATA: ', data);\n      callback(data);\n    }\n\n    characteristic.addEventListener(CHANGE_EVENT, listener);\n    characteristic.startNotifications();\n\n    return {\n      device,\n      server,\n      service,\n      start: () => {\n        characteristic.startNotifications();\n      },\n      stop: () => {\n        characteristic.stopNotifications();\n        characteristic.removeEventListener(CHANGE_EVENT, listener);\n      },\n    };\n  } catch (e) {\n    console.error('Could not connect to any devices', e);\n    return null;\n  }\n};\n\nexport const connectPowerMeter = connectDevice(POWER);\nexport const connectHeartRateMonitor = connectDevice(HR);\nexport const connectCadenceMeter = connectDevice(CADENCE);\n","import React, { useState, useContext, useEffect, useRef } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport MainStore from '../stores/MainStore';\nimport SensorDataStore from '../stores/SensorDataStore';\nimport Chart from '../components/Chart';\nimport Grid from '../components/Grid';\nimport Tile from '../components/Tile';\nimport Global from '../styles/Global';\nimport moment from 'moment';\nimport { useParams } from 'react-router-dom'\n\nimport { connectPowerMeter, connectHeartRateMonitor, connectCadenceMeter } from '../utils/DeviceUtils'\n\nconst styles = {\n  color: Global.foreground,\n  backgroundColor: Global.background,\n  display: 'grid',\n  textAlign: 'center',\n  position: 'absolute',\n  top: 0,\n  bottom: 0,\n  left: 0,\n  right: 0\n}\n\nconst flexItem = {\n  gridColumn: 1 / 2,\n  height: '100%'\n}\n\nconst Main = observer(() => {\n\n  const main = useContext(MainStore);\n  const [time, setTime] = useState();\n\n  const animate = () => {\n    if (main.running) {\n      setTime(Date.now() - main.startTime);\n    }\n    requestRef.current = requestAnimationFrame(animate);\n  };\n  const requestRef = useRef();\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current);\n  }, []);\n\n\n  const sensorData = useContext(SensorDataStore);\n  const pairHR = async () => {\n    const hrMonitor = await connectHeartRateMonitor(hr => {\n      sensorData.addHr(hr);\n    });\n    if (hrMonitor) {\n      hrMonitor.start();\n    }\n  }\n\n  const pairPower = async () => {\n    console.log('CONNECTION POWER')\n    const powerMeter = await connectPowerMeter(power => {\n      sensorData.addPower(power);\n    });\n    if (powerMeter) {\n      powerMeter.start();\n    }\n  }\n\n  const pairCadence = async () => {\n    const cadenceMeter = await connectCadenceMeter(cadence => {\n      sensorData.addCadence(cadence);\n    })\n    if (cadenceMeter) {\n      cadenceMeter.start();\n    }\n  }\n  const ticks =\n    main.workoutData.length > 0\n      ? [\n          main.workoutData[0].x,\n          main.workoutData[Math.floor(main.workoutData.length / 2)].x,\n          main.workoutData[main.workoutData.length - 1].x,\n        ]\n    : [];\n\n  const toggleWorkout = () => {\n    if (main.running) {\n      main.running = false;\n      main.pauseTime = Date.now();\n    } else {\n      main.running = true;\n      if (main.startTime && main.pauseTime) {\n        main.startTime = main.startTime + (Date.now() - main.pauseTime)\n      } else {\n        main.startTime = Date.now()\n      }\n    }\n  }\n\n  const workoutTime = main.startTime ? Date.now() - main.startTime : \n    main.pauseTime ? main.pauseTime - main.startTime : 0;\n\n  const workoutTimeString = workoutTime ? moment.utc(workoutTime).format('HH:mm:ss') : '00:00:00'\n\n  const interval = main.workout && \n    main.workout.intervalData && \n    main.workout.intervalData.filter(({IsFake}) => !IsFake).sort((x, y) => x.End-y.End).find(({End}) => End > (workoutTime / 1000));\n  console.log('workoutTime: ', workoutTime / 1000);\n  console.log('INTERVAL', interval);\n  console.log('interval data',  main.workout.intervalData);\n  const intervalTime = interval ? moment.utc((interval.End * 1000) - workoutTime).format('HH:mm:ss') : '00:00:00'\n  const target = main.workout.workoutData && main.workout.workoutData.find(({seconds}) => (Math.round((workoutTime || 1) / 1000) * 1000) === seconds);\n  console.log('TARGET: ', target);\n  return (\n    <div style={styles}>\n      <Grid style={flexItem}>\n        <Tile width=\"25%\" title=\"POWER\" value={sensorData.power} onClick={pairPower}/>\n        <Tile width=\"50%\" title=\"INTERVAL TIME\" value={intervalTime} />\n        <Tile width=\"25%\" title=\"HEART RATE\" value={sensorData.hr} onClick={pairHR}/>\n        <Tile width=\"25%\" title=\"TARGET\" value={target ? target.memberFtpPercent : '---'} />\n        <Tile width=\"50%\" title=\"WORKOUT TIME\" value={workoutTimeString} onClick={toggleWorkout}/>\n        <Tile width=\"25%\" title=\"CADENCE\" value={sensorData.cadence} onClick={pairCadence} />\n      </Grid>\n      <Chart \n    style={flexItem}\n    ticks={ticks} \n    workoutData={main.workoutData} \n    currentTime={workoutTime}\n    hrData={main.startTime ? sensorData.heartRateMonitorData\n      .filter(({time}) => time -main.startTime >= 0).map(({value, time}) => \n        ({x: time - main.startTime, y: value})) : []}\n    powerData={main.startTime ? sensorData.powerData\n      .filter(({time}) => time -main.startTime >= 0).map(({value, time}) => \n      ({x: time - main.startTime, y: value})) : []}/>\n \n    </div>\n  );  \n});\n\nexport default Main;\n","import React, { useContext, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport MainStore from './stores/MainStore';\nimport { getWorkout, getWorkouts } from './utils/TrainerRoadAPI';\nimport Main from './containers/Main';\nimport { HashRouter as Router, Route, Switch, useParams } from 'react-router-dom';\n\nconst HR = '';\nconst POWER = '';\nconst CADENCE = '';\nconst FTP = 320;\n\nconst LoadWorkout = () => {\n  let { workoutId } = useParams();\n  const main = useContext(MainStore);\n  // Initialize workout\n  useEffect(() => {\n    async function fetchData() {\n      if (!workoutId) {\n        const workouts = await getWorkouts();\n        console.log('WORKOUTS: ', workouts);\n        workoutId = workouts[4].Id;\n      }\n      const workout = await getWorkout(workoutId);\n      console.log('WORKOUT: ', workout);\n      main.workout = workout;\n      main.workoutData = workout.workoutData.map(d => ({ x: d.seconds, y: d.memberFtpPercent }));\n    }\n    fetchData();\n  }, [main]);\n  return null;\n};\n\nconst App = observer(() => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/:workoutId\">\n          <LoadWorkout />\n          <Main />\n        </Route>\n        <Route path=\"/\">\n          <LoadWorkout />\n          <Main />\n        </Route>\n      </Switch>\n    </Router>\n  );\n});\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}